// Template Method у гральному додатку

// Шаблон Template Method є шаблоном поведінки, який визначає скелет алгоритму
// в методі, але дозволяє підкласам перевизначати конкретні кроки алгоритму,
// не змінюючи його структуру

// Припустимо, у нас є гральний додаток, який містить кілька рівнів. Кожен
// рівень має свої унікальні характеристики, такі як різні вороги, перешкоди та
// цілі, але вони всі дотримуються однієї основної структури. Ми можемо
// використовувати шаблон Template Method для визначення цієї структури в
// базовому класі і дозволити кожному рівню реалізувати власні конкретні деталі.

// Ось приклад реалізації шаблону Template Method у мові Dart

abstract class GameLevel {
  void start() {
    initialize();
    play();
    end();
  }

  void initialize() {
    print('Ініціалізація рівня...');
  }

  void end() {
    print('Рівень завершено.');
  }

  // Цей метод є абстрактним, тому його мають реалізувати всі підкласи.
  void play();
}

class LevelOne extends GameLevel {
  @override
  void play() {
    print('Гра на рівні один...');
    // Додайте конкретну гральну логіку для рівня один тут.
  }
}

class LevelTwo extends GameLevel {
  @override
  void play() {
    print('Гра на рівні два...');
    // Додайте конкретну гральну логіку для рівня два тут.
  }
}

void main() {
  var levelOne = LevelOne();
  var levelTwo = LevelTwo();

  levelOne.start();
  levelTwo.start();
}

// У цьому прикладі ми маємо абстрактний клас GameLevel, який визначає основну
// структуру кожного рівня за допомогою методу start, який послідовно викликає
// методи initialize, play та end.